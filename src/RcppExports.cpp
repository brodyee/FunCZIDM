// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// FunCZIDMSampler
List FunCZIDMSampler(const int ITER, const arma::umat COUNTS, const arma::mat X, const arma::uvec ID_END_IDX, const arma::uvec RAND_EFF_COLS, const int BURN_IN, const int NUM_THIN, const int ADJ_FREQ, const double PROPOSAL_CAP, const bool ZI_GROUPED, const bool ADJ_PROPOSALS, const bool RETURN_BURN_IN, const bool CAP_PROPOSALS, const bool PRINT_PROGRESS, const Rcpp::CharacterVector TO_RETRUN, Nullable<arma::mat> betaInitial, Nullable<arma::mat> rInitial, Nullable<List> priors, Nullable<List> proposalVars);
RcppExport SEXP _FunCZIDM_FunCZIDMSampler(SEXP ITERSEXP, SEXP COUNTSSEXP, SEXP XSEXP, SEXP ID_END_IDXSEXP, SEXP RAND_EFF_COLSSEXP, SEXP BURN_INSEXP, SEXP NUM_THINSEXP, SEXP ADJ_FREQSEXP, SEXP PROPOSAL_CAPSEXP, SEXP ZI_GROUPEDSEXP, SEXP ADJ_PROPOSALSSEXP, SEXP RETURN_BURN_INSEXP, SEXP CAP_PROPOSALSSEXP, SEXP PRINT_PROGRESSSEXP, SEXP TO_RETRUNSEXP, SEXP betaInitialSEXP, SEXP rInitialSEXP, SEXP priorsSEXP, SEXP proposalVarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type ITER(ITERSEXP);
    Rcpp::traits::input_parameter< const arma::umat >::type COUNTS(COUNTSSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type ID_END_IDX(ID_END_IDXSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type RAND_EFF_COLS(RAND_EFF_COLSSEXP);
    Rcpp::traits::input_parameter< const int >::type BURN_IN(BURN_INSEXP);
    Rcpp::traits::input_parameter< const int >::type NUM_THIN(NUM_THINSEXP);
    Rcpp::traits::input_parameter< const int >::type ADJ_FREQ(ADJ_FREQSEXP);
    Rcpp::traits::input_parameter< const double >::type PROPOSAL_CAP(PROPOSAL_CAPSEXP);
    Rcpp::traits::input_parameter< const bool >::type ZI_GROUPED(ZI_GROUPEDSEXP);
    Rcpp::traits::input_parameter< const bool >::type ADJ_PROPOSALS(ADJ_PROPOSALSSEXP);
    Rcpp::traits::input_parameter< const bool >::type RETURN_BURN_IN(RETURN_BURN_INSEXP);
    Rcpp::traits::input_parameter< const bool >::type CAP_PROPOSALS(CAP_PROPOSALSSEXP);
    Rcpp::traits::input_parameter< const bool >::type PRINT_PROGRESS(PRINT_PROGRESSSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type TO_RETRUN(TO_RETRUNSEXP);
    Rcpp::traits::input_parameter< Nullable<arma::mat> >::type betaInitial(betaInitialSEXP);
    Rcpp::traits::input_parameter< Nullable<arma::mat> >::type rInitial(rInitialSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type priors(priorsSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type proposalVars(proposalVarsSEXP);
    rcpp_result_gen = Rcpp::wrap(FunCZIDMSampler(ITER, COUNTS, X, ID_END_IDX, RAND_EFF_COLS, BURN_IN, NUM_THIN, ADJ_FREQ, PROPOSAL_CAP, ZI_GROUPED, ADJ_PROPOSALS, RETURN_BURN_IN, CAP_PROPOSALS, PRINT_PROGRESS, TO_RETRUN, betaInitial, rInitial, priors, proposalVars));
    return rcpp_result_gen;
END_RCPP
}
// getFit
arma::cube getFit(const arma::cube& beta, const arma::mat& basis, const arma::vec& covariates);
RcppExport SEXP _FunCZIDM_getFit(SEXP betaSEXP, SEXP basisSEXP, SEXP covariatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type covariates(covariatesSEXP);
    rcpp_result_gen = Rcpp::wrap(getFit(beta, basis, covariates));
    return rcpp_result_gen;
END_RCPP
}
// getSumExpFit
arma::mat getSumExpFit(const arma::cube& fit);
RcppExport SEXP _FunCZIDM_getSumExpFit(SEXP fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type fit(fitSEXP);
    rcpp_result_gen = Rcpp::wrap(getSumExpFit(fit));
    return rcpp_result_gen;
END_RCPP
}
// getFitOfData
arma::cube getFitOfData(const arma::cube& beta, const arma::mat& Xtv);
RcppExport SEXP _FunCZIDM_getFitOfData(SEXP betaSEXP, SEXP XtvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xtv(XtvSEXP);
    rcpp_result_gen = Rcpp::wrap(getFitOfData(beta, Xtv));
    return rcpp_result_gen;
END_RCPP
}
// getRAFits
arma::cube getRAFits(const arma::cube& beta, const arma::mat& basis, const arma::vec& covariates);
RcppExport SEXP _FunCZIDM_getRAFits(SEXP betaSEXP, SEXP basisSEXP, SEXP covariatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type covariates(covariatesSEXP);
    rcpp_result_gen = Rcpp::wrap(getRAFits(beta, basis, covariates));
    return rcpp_result_gen;
END_RCPP
}
// getRAFitsPrecalc
arma::cube getRAFitsPrecalc(const arma::cube& fit, const arma::mat& sumExpFit);
RcppExport SEXP _FunCZIDM_getRAFitsPrecalc(SEXP fitSEXP, SEXP sumExpFitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sumExpFit(sumExpFitSEXP);
    rcpp_result_gen = Rcpp::wrap(getRAFitsPrecalc(fit, sumExpFit));
    return rcpp_result_gen;
END_RCPP
}
// getBetaVC
arma::cube getBetaVC(const arma::cube& beta, const arma::uvec VCRows, const arma::mat& basis);
RcppExport SEXP _FunCZIDM_getBetaVC(SEXP betaSEXP, SEXP VCRowsSEXP, SEXP basisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type VCRows(VCRowsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    rcpp_result_gen = Rcpp::wrap(getBetaVC(beta, VCRows, basis));
    return rcpp_result_gen;
END_RCPP
}
// getHillDiversity
arma::mat getHillDiversity(const arma::cube& beta, const arma::mat& basis, const arma::vec& covariates, const double l);
RcppExport SEXP _FunCZIDM_getHillDiversity(SEXP betaSEXP, SEXP basisSEXP, SEXP covariatesSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(getHillDiversity(beta, basis, covariates, l));
    return rcpp_result_gen;
END_RCPP
}
// getDeltaHillDiversity
arma::mat getDeltaHillDiversity(const arma::cube& betaVCFits, const arma::cube& fit, const arma::mat& sumExpFit, const double l, double change);
RcppExport SEXP _FunCZIDM_getDeltaHillDiversity(SEXP betaVCFitsSEXP, SEXP fitSEXP, SEXP sumExpFitSEXP, SEXP lSEXP, SEXP changeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type betaVCFits(betaVCFitsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sumExpFit(sumExpFitSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type change(changeSEXP);
    rcpp_result_gen = Rcpp::wrap(getDeltaHillDiversity(betaVCFits, fit, sumExpFit, l, change));
    return rcpp_result_gen;
END_RCPP
}
// getAllCatDeltaRA
arma::cube getAllCatDeltaRA(const arma::cube& betaVCFits, const arma::cube& fit, const arma::mat& sumExpFit, double change);
RcppExport SEXP _FunCZIDM_getAllCatDeltaRA(SEXP betaVCFitsSEXP, SEXP fitSEXP, SEXP sumExpFitSEXP, SEXP changeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type betaVCFits(betaVCFitsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sumExpFit(sumExpFitSEXP);
    Rcpp::traits::input_parameter< double >::type change(changeSEXP);
    rcpp_result_gen = Rcpp::wrap(getAllCatDeltaRA(betaVCFits, fit, sumExpFit, change));
    return rcpp_result_gen;
END_RCPP
}
// getDeltaRA
arma::mat getDeltaRA(const int cat, const arma::cube& betaVCFits, const arma::cube& fit, const arma::mat& sumExpFit, double change);
RcppExport SEXP _FunCZIDM_getDeltaRA(SEXP catSEXP, SEXP betaVCFitsSEXP, SEXP fitSEXP, SEXP sumExpFitSEXP, SEXP changeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type cat(catSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type betaVCFits(betaVCFitsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sumExpFit(sumExpFitSEXP);
    Rcpp::traits::input_parameter< double >::type change(changeSEXP);
    rcpp_result_gen = Rcpp::wrap(getDeltaRA(cat, betaVCFits, fit, sumExpFit, change));
    return rcpp_result_gen;
END_RCPP
}
// aitchison_distance
double aitchison_distance(const arma::vec& xi, const arma::vec& xj);
RcppExport SEXP _FunCZIDM_aitchison_distance(SEXP xiSEXP, SEXP xjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xj(xjSEXP);
    rcpp_result_gen = Rcpp::wrap(aitchison_distance(xi, xj));
    return rcpp_result_gen;
END_RCPP
}
// getSignifCovProfileRA
arma::uvec getSignifCovProfileRA(const arma::cube& betaVCFits, const arma::mat& betaVCFit, const arma::cube& fit, const arma::mat& sumExpFit, const double change);
RcppExport SEXP _FunCZIDM_getSignifCovProfileRA(SEXP betaVCFitsSEXP, SEXP betaVCFitSEXP, SEXP fitSEXP, SEXP sumExpFitSEXP, SEXP changeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type betaVCFits(betaVCFitsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betaVCFit(betaVCFitSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sumExpFit(sumExpFitSEXP);
    Rcpp::traits::input_parameter< const double >::type change(changeSEXP);
    rcpp_result_gen = Rcpp::wrap(getSignifCovProfileRA(betaVCFits, betaVCFit, fit, sumExpFit, change));
    return rcpp_result_gen;
END_RCPP
}
// getSignifCovProfileAlpha
bool getSignifCovProfileAlpha(const arma::cube& fit, const arma::cube& fitBase, const double l);
RcppExport SEXP _FunCZIDM_getSignifCovProfileAlpha(SEXP fitSEXP, SEXP fitBaseSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type fitBase(fitBaseSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(getSignifCovProfileAlpha(fit, fitBase, l));
    return rcpp_result_gen;
END_RCPP
}
// getTrueVCRAFromMat
arma::vec getTrueVCRAFromMat(const arma::mat& betaNonVC, const arma::vec& testPoints, int catToCheck, const arma::vec& funcInfo, double xCenter, bool interceptTV);
RcppExport SEXP _FunCZIDM_getTrueVCRAFromMat(SEXP betaNonVCSEXP, SEXP testPointsSEXP, SEXP catToCheckSEXP, SEXP funcInfoSEXP, SEXP xCenterSEXP, SEXP interceptTVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type betaNonVC(betaNonVCSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type testPoints(testPointsSEXP);
    Rcpp::traits::input_parameter< int >::type catToCheck(catToCheckSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type funcInfo(funcInfoSEXP);
    Rcpp::traits::input_parameter< double >::type xCenter(xCenterSEXP);
    Rcpp::traits::input_parameter< bool >::type interceptTV(interceptTVSEXP);
    rcpp_result_gen = Rcpp::wrap(getTrueVCRAFromMat(betaNonVC, testPoints, catToCheck, funcInfo, xCenter, interceptTV));
    return rcpp_result_gen;
END_RCPP
}
// getTrueHillDivMultiChange
arma::vec getTrueHillDivMultiChange(const arma::mat& baseFit, const arma::vec& testPoints, const arma::vec& funcInfo, const double l, double change);
RcppExport SEXP _FunCZIDM_getTrueHillDivMultiChange(SEXP baseFitSEXP, SEXP testPointsSEXP, SEXP funcInfoSEXP, SEXP lSEXP, SEXP changeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type baseFit(baseFitSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type testPoints(testPointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type funcInfo(funcInfoSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type change(changeSEXP);
    rcpp_result_gen = Rcpp::wrap(getTrueHillDivMultiChange(baseFit, testPoints, funcInfo, l, change));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FunCZIDM_FunCZIDMSampler", (DL_FUNC) &_FunCZIDM_FunCZIDMSampler, 19},
    {"_FunCZIDM_getFit", (DL_FUNC) &_FunCZIDM_getFit, 3},
    {"_FunCZIDM_getSumExpFit", (DL_FUNC) &_FunCZIDM_getSumExpFit, 1},
    {"_FunCZIDM_getFitOfData", (DL_FUNC) &_FunCZIDM_getFitOfData, 2},
    {"_FunCZIDM_getRAFits", (DL_FUNC) &_FunCZIDM_getRAFits, 3},
    {"_FunCZIDM_getRAFitsPrecalc", (DL_FUNC) &_FunCZIDM_getRAFitsPrecalc, 2},
    {"_FunCZIDM_getBetaVC", (DL_FUNC) &_FunCZIDM_getBetaVC, 3},
    {"_FunCZIDM_getHillDiversity", (DL_FUNC) &_FunCZIDM_getHillDiversity, 4},
    {"_FunCZIDM_getDeltaHillDiversity", (DL_FUNC) &_FunCZIDM_getDeltaHillDiversity, 5},
    {"_FunCZIDM_getAllCatDeltaRA", (DL_FUNC) &_FunCZIDM_getAllCatDeltaRA, 4},
    {"_FunCZIDM_getDeltaRA", (DL_FUNC) &_FunCZIDM_getDeltaRA, 5},
    {"_FunCZIDM_aitchison_distance", (DL_FUNC) &_FunCZIDM_aitchison_distance, 2},
    {"_FunCZIDM_getSignifCovProfileRA", (DL_FUNC) &_FunCZIDM_getSignifCovProfileRA, 5},
    {"_FunCZIDM_getSignifCovProfileAlpha", (DL_FUNC) &_FunCZIDM_getSignifCovProfileAlpha, 3},
    {"_FunCZIDM_getTrueVCRAFromMat", (DL_FUNC) &_FunCZIDM_getTrueVCRAFromMat, 6},
    {"_FunCZIDM_getTrueHillDivMultiChange", (DL_FUNC) &_FunCZIDM_getTrueHillDivMultiChange, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_FunCZIDM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
